*******************************************************
*  Name      : Jake Billings
*  Student ID: 105955110
*  Class     :  CSC 2312
*  Due Date  :  Mar. 30, 2018
*******************************************************


                 Read Me


*******************************************************
*  Description of the program
*******************************************************

Problem
=======
This assignment will have you read information in from various files, perform exception handling when reading those
files, and create a base class and derived classes with virtual functions to read the various files, perform some
computations on the inputs as described below, and print the file details.

For this assignment, create a base class called Animal.  It should have as member variables any variables that are
contained across all animals in this assignment along with any associated mutator and accessor member functions.
You will create a derived class for each of the following: dog, fish, horse, monkey and lizard.  The member functions
to read and output the objectâ€™s information will be virtual functions.  Each derived class must contain the
additional member variables and member functions needed to include all fields in each input file. Each input file
will contain data about one object; you will not be required to read in information about multiple objects from
one file.

My Solution
===========
I implement virtual print() and read() functions. Then, I override the normal stream operators to use these virtual
 functions. If at any point, the stream fails to read a required value or an invalid value is presented,
 then the read() function throws an exception. The main() function catches this exception and displays
 an error.
I throw exceptions if function attempt to set weights/heights into the negatives on the Dog/Horse objects.


Test Strategy
=============
 See test()

 I run unit tests that ensure that the stream operator (which uses the virtual read() function) properly reads data
  from the example data files.
 I also created garbage/corrupted/fuzzy test files and read those. I have unit tests that verify that exceptions
  are thrown when this occurs.
 I also have a demo that prints the results of the the mandatory calculations, and I check the results manually.

Status: Runs on OSX using CLion and on csegrid using g++

*******************************************************
*  Source files
*******************************************************

Name:  billingsJakeHW05.cpp
    test() - runs automated unit and integration testing using a few helper test functions
    main() - runs test() then provides a demo

Name: filefuzzer.py
    this python script generates random data and dumps it into "fuzzy.csv"
    it is used as a "fuzzer" for the file inputs for this project
    the read() functions for each class are expected to throw an error when reading from "fuzzy.csv" file

Name: fuzzy.csv
    this is purely random data generated by filefuzzer.py
    it is used as a "fuzzer" for the file inputs for this project
    the read() functions for each class are expected to throw an error when reading from "fuzzy.csv" file

Name: Fish_nasty.csv
    this is a corrupted/malformed csv input file for the fish data type
    the read() functions for each class are expected to throw an error when reading from this file

Name: Horse_nasty.csv
    this is a corrupted/malformed csv input file for the horse data type
    the read() functions for each class are expected to throw an error when reading from this file


Name: nasty.csv
    this is a corrupted/malformed csv input file for the fish data type
    the read() functions for each class are expected to throw an error when reading from this file

Name: Animal.h
    declaration file for Animal class

Name: Animal.cpp
    implementation file for Animal class

Name: Dog.h
    declaration file for Dog class

Name: Dog.cpp
    implementation file for Dog class

Name: Dog.csv
    properly-formatted example data file

Name: Fish.h
    declaration file for Fish class

Name: Fish.cpp
    implementation file for Fish class

Name: Fish.csv
    properly-formatted example data file

Name: Horse.h
    declaration file for Horse class

Name: Horse.cpp
    implementation file for Horse class

Name: Horse.csv
    properly-formatted example data file

Name: Lizard.h
    declaration file for Lizard class

Name: Lizard.cpp
    implementation file for Lizard class

Name: Lizard.csv
    properly-formatted example data file

Name: Monkey.h
    declaration file for Monkey class

Name: Monkey.cpp
    implementation file for Monkey class

Name: Monkey.csv
    properly-formatted example data file

   
*******************************************************
*  Status of program
*******************************************************

   The program runs successfully.  
   
   The program was developed and tested on CLion on OSX.  It was
   compiled, run, and tested on csegrid.ucdenver.pvt.

